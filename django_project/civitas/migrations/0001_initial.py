# Generated by Django 2.2.15 on 2022-07-04 04:25

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AimsoirFeatureCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'aimsoir_feature_codes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CapitalProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=512, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('proforma_cost', models.FloatField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'capital_projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CapitalProjectFeatureCombination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'capital_project_feature_combination',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CivicAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('pntid', models.BigIntegerField(blank=True, null=True)),
                ('segid', models.BigIntegerField(blank=True, null=True)),
                ('civicnum', models.BigIntegerField(blank=True, null=True)),
                ('civsuffix', models.CharField(blank=True, max_length=512, null=True)),
                ('unit_num', models.CharField(blank=True, max_length=512, null=True)),
                ('add_loc', models.CharField(blank=True, max_length=512, null=True)),
                ('strprefix', models.CharField(blank=True, max_length=512, null=True)),
                ('strname', models.CharField(blank=True, max_length=512, null=True)),
                ('strsuffix', models.CharField(blank=True, max_length=512, null=True)),
                ('strdir', models.CharField(blank=True, max_length=512, null=True)),
                ('comm_id', models.BigIntegerField(blank=True, null=True)),
                ('comm', models.CharField(blank=True, max_length=512, null=True)),
                ('mun', models.CharField(blank=True, max_length=512, null=True)),
                ('county', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                'verbose_name_plural': 'civic addresses',
                'db_table': 'civic_address',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='COF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cof',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('currency', models.CharField(max_length=512)),
            ],
            options={
                'verbose_name_plural': 'communities',
                'db_table': 'community',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'condition',
                'ordering': ('name',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Deterioration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('equation', models.CharField(max_length=512)),
            ],
            options={
                'db_table': 'deterioration',
                'ordering': ('name',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureBase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('install_date', models.DateField(help_text='When this feature is installed')),
                ('quantity', models.FloatField(help_text='Quantity of the feature. The unit is based on the sub class')),
                ('description', models.TextField(blank=True, null=True)),
                ('capital_project_id', models.SmallIntegerField(blank=True, null=True)),
                ('renewal_cost', models.FloatField(blank=True, help_text='How much cost for renewal the feature with all quantity', null=True)),
                ('maintenance_cost', models.FloatField(blank=True, help_text='How much cost to maintenance the feature with all quantity', null=True)),
                ('file_reference', models.TextField(blank=True, null=True)),
                ('view_name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'feature_base',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'feature classes',
                'db_table': 'asset_class',
                'ordering': ('name',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureGeometry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geom_point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('geom_line', django.contrib.gis.db.models.fields.LineStringField(blank=True, null=True, srid=4326)),
                ('geom_polygon', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'verbose_name_plural': 'feature geometries',
                'db_table': 'feature_geometry',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_text', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'feature_property',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureSubClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'feature sub classes',
                'db_table': 'asset_sub_class',
                'ordering': ('name',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('lifespan', models.FloatField(blank=True, help_text='Total estimated life span of asset in years', null=True)),
                ('maintenance_cost', models.FloatField(blank=True, db_column='unit_maintenance_cost', help_text='Annual operation and maintenance cost (Default in canadian dollars)', null=True)),
                ('renewal_cost', models.FloatField(blank=True, db_column='unit_renewal_cost', help_text='Renewal cost (Default in canadian dollars)', null=True)),
            ],
            options={
                'db_table': 'asset_type',
                'ordering': ('name',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureTypeCombination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'asset_classification_combination',
                'ordering': ('the_class', 'sub_class', 'type'),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='POF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pof',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'property',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'province',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Administrative code', max_length=128, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'region',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReporterData',
            fields=[
                ('feature_id', models.IntegerField(primary_key=True, serialize=False)),
                ('province_id', models.IntegerField(blank=True, null=True)),
                ('province_name', models.CharField(blank=True, max_length=512, null=True)),
                ('region_id', models.IntegerField(blank=True, null=True)),
                ('region_name', models.CharField(blank=True, max_length=512, null=True)),
                ('community_id', models.IntegerField(blank=True, null=True)),
                ('community_name', models.CharField(blank=True, max_length=512, null=True)),
                ('system_id', models.IntegerField(blank=True, null=True)),
                ('system_name', models.CharField(blank=True, max_length=512, null=True)),
                ('length', models.IntegerField(blank=True, null=True)),
                ('area', models.IntegerField(blank=True, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('renewal_cost_method', models.TextField(blank=True, null=True)),
                ('maintenance_cost_method', models.TextField(blank=True, null=True)),
                ('lifespan_method', models.TextField(blank=True, null=True)),
                ('remaining_years_method', models.TextField(blank=True, null=True)),
                ('deterioration_name', models.CharField(blank=True, max_length=512, null=True)),
                ('renewal_cost', models.FloatField(blank=True, null=True)),
                ('maintenance_cost', models.FloatField(blank=True, null=True)),
                ('lifespan', models.IntegerField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('remaining_years', models.IntegerField(blank=True, null=True)),
                ('annual_reserve', models.IntegerField(blank=True, null=True)),
                ('pof_id', models.IntegerField(blank=True, null=True)),
                ('pof_name', models.CharField(blank=True, max_length=512, null=True)),
                ('cof_id', models.IntegerField(blank=True, null=True)),
                ('cof_name', models.CharField(blank=True, max_length=512, null=True)),
                ('risk_value', models.IntegerField(blank=True, null=True)),
                ('risk_level', models.CharField(blank=True, max_length=512, null=True)),
                ('condition_id', models.IntegerField(blank=True, null=True)),
                ('condition_name', models.CharField(blank=True, max_length=512, null=True)),
                ('class_id', models.IntegerField(blank=True, null=True)),
                ('class_name', models.CharField(blank=True, max_length=512, null=True)),
                ('sub_class_id', models.IntegerField(blank=True, null=True)),
                ('sub_class_name', models.CharField(blank=True, max_length=512, null=True)),
                ('sub_class_description', models.TextField(blank=True, null=True)),
                ('sub_class_deterioration_id', models.IntegerField(blank=True, null=True)),
                ('sub_class_unit_id', models.IntegerField(blank=True, null=True)),
                ('sub_class_unit_name', models.CharField(blank=True, max_length=512, null=True)),
                ('sub_class_unit_description', models.TextField(blank=True, null=True)),
                ('type_id', models.IntegerField(blank=True, null=True)),
                ('asset_type_name', models.CharField(blank=True, max_length=512, null=True)),
                ('asset_type_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'reporter_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(blank=True, db_column='risk_value', null=True)),
                ('level', models.CharField(blank=True, db_column='risk_level', max_length=512, null=True)),
            ],
            options={
                'db_table': 'risk_lookup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'system',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'unit',
                'ordering': ('name',),
                'managed': False,
            },
        ),
    ]
